(define make-ok
	(lambda (val)
		(cons 'ok val)
	)
)


(define make-error
	(lambda (msg)
		(cons 'error msg)
	)
)


(define ok?
	(lambda (res)
		(if	(pair? res) (eq? (car res) 'ok) #f)
	)
)


(define error?
	(lambda (res)
		(if	(pair? res) (eq? (car res) 'error) #f)
	)
)


(define result?
	(lambda (res)
		(or (ok? res) (error? res))
	)
)


(define result->val
	(lambda (res)
		(cdr res)
	)
)


(define bind 
	(lambda (f)
		(lambda (res)
			(if (not (result? res)) 
				(make-error "Unexpected type of 'res'")

				(if (error? res) 
					res
					(f (result->val res))
				)
			)
		)
	)
)


(define make-dict
	(lambda ()
		'()
	)
)


(define dict?
	(lambda (e)
		(or	(empty? e)

			(if	(not (pair? e))
				#f
				
				(if (not (pair? (car e)))
					#f

					(dict? (cdr e))
				)
			)
		)
	)
)


(define get-iter
	(lambda (dict k)
		(if (empty? dict) 
			(make-error "Key not found")
			
			(if (eq? (car (car dict)) k) 
				(make-ok (cdr (car dict)))
				(get-iter (cdr dict) k)
			)
		)
	)
)


(define get
	(lambda (dict k)
		(if (dict? dict)
			(get-iter dict k)
			(make-error "Error: not a dictionary")
		)
	)
)


(define put-iter
	(lambda (dict k v)
		(if (empty? dict)
			(cons (cons k v) dict)

			(if (eq? (car (car dict)) k) 
				(cons (cons k v) (cdr dict))
				(cons (cons k v) (get-iter (cdr dict) k))
			)
		)
	)
)


(define put
	(lambda (dict k v)
		(if (dict? dict)
			(make-ok (put-iter dict k v))
			(make-error "Error: not a dictionary")
		)
	)
)


(define map-dict
	(lambda (dict f)
		@TODO
	)
)


(define filter-dict
	(lambda (dict pred)
		@TODO
	)
)
