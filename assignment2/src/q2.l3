(define make-ok
  (lambda (val)
    (cons 'ok val)
  )
 )
 
(define make-error
  (lambda (msg)
    (cons 'error msg)
  )
 )

(define ok?
  (lambda (res)
    (cond 	((not (pair? res)) #f)
			((equal? (car res) 'ok) #t)
			(else #f)
	)
  )
 )

(define error?
  (lambda (res)
    (cond 	((not (pair? res)) #f)
			((equal? (car res) 'error) #t)
			(else #f)
	)
  )
 )

(define result?
  (lambda (res)
    (or (ok? res) (error? res))
  )
 )

(define result->val
  (lambda (res)
	(cdr res)
  )
)

(define bind 
  (lambda (f)
    @TODO
  )
)

(define make-dict
  (lambda ()
    @TODO
  )
)

(define dict?
  (lambda (e)
    @TODO
  )
)

(define get
  (lambda (dict k)
    @TODO
  )
)

(define put
  (lambda (dict k v)
    @TODO
  )
)

(define map-dict
  (lambda (dict f)
    @TODO
  )
)

(define filter-dict
  (lambda (dict pred)
    @TODO
  )
)
